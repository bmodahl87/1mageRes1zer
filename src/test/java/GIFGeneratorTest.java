import org.junit.Before;
import org.junit.Test;
import resizer.GIFGenerator;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.URL;
import java.util.ArrayList;

import static junit.framework.Assert.assertTrue;

public class GIFGeneratorTest {

    private GIFGenerator generator;
    private ArrayList<BufferedImage> images;
    private String testResourcesPath;

    @Before
    public void setUp() throws IOException{

        generator = new GIFGenerator();
        testResourcesPath = "src/test/resources/";

        // Make the test images array
        images = new ArrayList<BufferedImage>();

        URL pic1Url = new URL("http://www.clipartbest.com/cliparts/KTn/XXK/KTnXXK8Ec.png");
        URL pic2Url = new URL("http://www.iconsdb.com/icons/preview/orange/fish-xxl.png");

        BufferedImage pic1Img = ImageIO.read(pic1Url);
        BufferedImage pic2Img = ImageIO.read(pic2Url);

        images.add(pic2Img);
        images.add(pic1Img);

    }

    /* The file generated by this test must be checked manually to make sure the gif cycles properly.
     * Gif should be VERY fast. */
    @Test
    public void generateFast() throws IOException {

        // Generate the gif
        ByteArrayOutputStream gifStream = generator.generate(0, images);

        // Output the gif to the file system for viewing
        // (it will be output through the response in our actual implementation)
        OutputStream outputStream = new FileOutputStream(testResourcesPath + "testFAST.gif");
        gifStream.writeTo(outputStream);

        assertTrue("Verify " + testResourcesPath + "testFAST.gif in os file browser to see result", true);

    }

    /* The file generated by this test must be checked manually to make sure the gif cycles properly.
     * Gif should be VERY slow. */
    @Test
    public void generateSlow() throws IOException {

        // Generate the gif
        ByteArrayOutputStream gifStream = generator.generate(3, images);

        // Output the gif to the file system for viewing
        // (it will be output through the response in our actual implementation)
        OutputStream outputStream = new FileOutputStream(testResourcesPath + "testSLOW.gif");
        gifStream.writeTo(outputStream);

        assertTrue("Verify " + testResourcesPath + "testSLOW.gif in os file browser to see result", true);

    }

}